version: '3.4'

services:
  amourlink.recommendation:
    image: ${DOCKER_REGISTRY-}recommendation:latest
    build:
      context: ..
      dockerfile: AmourLink.Backend.CSharp/Services/AmourLink.Recommendation/Dockerfile
  
  amourlink.gateway:
    image: ${DOCKER_REGISTRY-}gateway:latest
    build:
      context: ..
      dockerfile: AmourLink.Backend.CSharp/Services/AmourLink.Gateway/Dockerfile
      
  amourlink.security:
    image: danyloz/amourlink-java-security-service:latest
    
  amourlink.swipe:
    image: ${DOCKER_REGISTRY-}swipe:latest
    build:
      context: ..
      dockerfile: AmourLink.Backend.CSharp/Services/AmourLink.Swipe/Dockerfile
      
  amourlink.match:
    image: ${DOCKER_REGISTRY-}matching:latest
    build:
      context: ..
      dockerfile: AmourLink.Backend.CSharp/Services/AmourLink.Matching/Dockerfile
    depends_on:
      - create-topics
        
  media-service:
    image: danyloz/amourlink-java-media-service:latest
    ports:
      - "8005:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/amourlink
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootPassword
      SPRING_PROFILES_ACTIVE: docker

  amourlink.user:
    image: danyloz/amourlink-java-user-service:latest
    depends_on:
      - media-service
    ports:
      - "8006:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/amourlink
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootPassword
      SPRING_PROFILES_ACTIVE: docker-update
          
  zookeeper:
    image: wurstmeister/zookeeper

  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    depends_on:
      - zookeeper
        
  amourlink.notification-email:
    image: danyloz/amourlink-java-email-service:latest
    depends_on:
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker


  create-topics:
    image: wurstmeister/kafka
    depends_on:
      - kafka
    entrypoint:
      - /bin/sh
      - -c
      - |
        # Wait for the Kafka broker to be ready
        echo "Waiting for Kafka broker to be ready..."
        while ! nc -z kafka 9092; do   
          sleep 1
        done
        echo "Kafka broker is ready"
        
        # Create topics
        kafka-topics.sh --create --topic SwipeEvent --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181
        kafka-topics.sh --create --topic RatingEvent --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181
        kafka-topics.sh --create --topic email-service-send-email --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181

